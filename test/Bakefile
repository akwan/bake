#!/usr/bin/env bash
set -eu

TEST_NAME=".none."
TESTS=""

function bake_test () {
  local tname="$1"
  bake_task $tname
  TESTS="$TESTS $tname"
}

function in_test () {
  TEST_NAME="$1"
}

bake_test 01_find_bakefile_sets_absolute_path
function 01_find_bakefile_sets_absolute_path () {
  in_test $FUNCNAME
  cd lib
  test -f $BAKEFILE
  test -f $(bake_bakefile_dir)/Bakefile
  cd ..
}

bake_test 02_bake_cd
function 02_bake_cd () {
  cd lib
  bake_cd
  test -f Bakefile || exit 1
  bake_cd lib
  test -f ../Bakefile || exit 1
}

bake_test 03_bake_looks_up_directory_tree
function 03_bake_looks_up_directory_tree () {
  bake_cd
  bake_cmd="$(pwd)/../bake"
  pwd
  cd sub/dir/a/b/c/
  if bake_find_bakefile_impl; then
    bake_echo_green "OK: found Bakefile from $(pwd)"
  else
    bake_echo_red "ERROR: did not find Bakefile from $(pwd)"
    return 1
  fi

  cd /tmp/
  if bake_find_bakefile_impl; then
    return 1
  else
    bake_echo_green "OK: did not find Bakefile from $(pwd)"
  fi
  bake_cd
}

bake_test 04_require_all
function 04_require_all () {
  bake_require_all lib/
  bar_task
}

bake_test 05_looks_like_url
function 05_looks_like_url () {
  local non_urls="lib/foo.sh nothing another.thing README.md some/directory/path gist.github.com/kyleburton/1234"
  local urls="http://github.com/kyleburton/bake/packages/vim/vim-go https://github.com/kyleburton/bake/packages/vim/vim-go github.com/kyleburton/bake/packages/vim/vim-go"
  for thing in $non_urls; do
    if bake_looks_like_url $thing; then
      bake_echo_red "Expected $thing to not bake_looks_like_url, but it did"
      return 1
    fi
  done

  for thing in $urls; do
    if ! bake_looks_like_url $thing; then
      bake_echo_red "Expected $thing to bake_looks_like_url, but it didn't"
      return 1
    fi
  done
}

bake_test 06_remote_require
function 06_remote_require () {
  bake_package_install github.com/kyleburton/bake/packages/bake/internal/test.sh
  bake_require github.com/kyleburton/bake/packages/bake/internal/test.sh
  bake_echo_test "remote require successful"
}

bake_test 07_echo_colors
function 07_echo_colors () {
  echo "Testing terminal colors"
  bake_echo_red       "This should be red text"
  bake_echo_lred      "This should be 'light' red text"
  bake_echo_blue      "This should be blue text"
  bake_echo_lblue     "This should be 'light' blue text"
  bake_echo_green     "This should be green text"
  bake_echo_lgreen    "This should be 'light' green text"
  bake_echo_yellow    "This should be yellow text"
  bake_echo_lgray     "This should be 'light' gray text"
  bake_echo_dgray     "This should be 'dark' gray text"
  bake_echo_cyan      "This should be cyan text"
  bake_echo_lcyan     "This should be 'light' cyan text"
  bake_echo_magenta   "This should be magenta text"
  bake_echo_lmagenta  "This should be 'light' magenta text"

  echo             -n "On One Line: "
  bake_echo_red    -n "red"
  bake_echo_lred   -n " and lred"
  bake_echo_blue   -n " and blue"
  bake_echo_lblue  -n " and lblue"
  bake_echo_green  -n " and green"
  bake_echo_lgreen -n " and lgreen"
  echo " and the end of the line"
}

bake_task all
function all () {
  bake_log_level fatal
  local debug="${1:-}"
  if [ -n "$debug" ]; then
    set -x
  fi
  local failed=""
  local passed=""
  for test in $TESTS; do
    bake_log_debug "running $test"
    if $test; then
      passed="$passed $test"
      bake_echo_green "bake $test # OK"
    else
      failed="$failed $test"
      bake_echo_red "bake $test # FAILED"
    fi
  done
  if [ -z "$failed" ]; then
    bake_echo_green "All tests passed"
  fi
}

